//// --------------------------------------------------------------------------------
//// DBML Schema for ePIC Experiment Fast Monitoring Bookkeeping (Revised)
////
//// This schema tracks Runs, STF Files, and message dispatches. The subscribers
//// table is kept for future use but is currently not linked to dispatches.
////
//// Legend:
//// > : one-to-many relationship
//// --------------------------------------------------------------------------------

Project epic_monitoring_db {
  database_type: 'PostgreSQL'
  note: 'Schema for the ePIC Fast Monitoring System, organized by Runs.'
}

// Custom enumeration for the status of a file in the workflow.
Enum file_status {
  registered
  processing
  processed
  failed
  sent_to_mq
}

// Stores information about data-taking runs. Each run gathers multiple STF files.
Table runs {
  run_id int [pk, increment]
  run_number int [unique, not null, note: 'The official unique number for the run']
  start_time timestamptz [not null, note: 'The wall-clock time when the run started']
  end_time timestamptz
  run_conditions jsonb [note: 'Flexible JSON for run conditions like beam energy, etc.']
}

// Central table to store metadata of STF files selected for monitoring.
Table stf_files {
  file_id uuid [pk, default: `gen_random_uuid()`, note: 'Primary key for the file entry']
  run_id int [not null]
  stf_identifier long [not null, note: 'Unique identifier for the Super Time Frame itself']
  file_url varchar(1024) [unique, not null, note: 'The unique access URL for the file']
  file_size_bytes long
  checksum varchar(64) [note: 'MD5, SHA256, etc.']
  creation_time timestamptz [default: `CURRENT_TIMESTAMP`]
  status file_status [not null, default: 'registered']
  metadata jsonb [note: 'Flexible JSON for any other relevant file-specific metadata']

  indexes {
    (run_id)
    (stf_identifier)
    (status)
  }
}

// Represents a consumer of the file metadata from the message queue.
// This table is currently not linked to dispatch events.
Table subscribers {
  subscriber_id int [pk, increment]
  subscriber_name varchar(255) [unique, not null]
  fraction float [note: 'Fraction of files requested, e.g., 0.1 for 10%']
  description text
  is_active bool [default: true]
}

// Bookkeeping log for each message sent from the system.
Table message_queue_dispatches {
  dispatch_id uuid [pk, default: `gen_random_uuid()`]
  file_id uuid [not null]
  dispatch_time timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  message_content jsonb [note: 'A copy of the message payload for auditing']
  is_successful bool [not null]
  error_message text

  indexes {
    (file_id)
    (dispatch_time)
  }
}

// Define Relationships
Ref: stf_files.run_id > runs.run_id
Ref: message_queue_dispatches.file_id > stf_files.file_id